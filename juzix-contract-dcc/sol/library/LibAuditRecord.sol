pragma solidity ^0.4.2;


import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibStack.sol";
import "../utillib/LibJson.sol";

library LibAuditRecord {
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibAuditRecord for *;

    struct AuditRecord {
        string auditId;//审核记录ID
        string auditorId;//审核人ID
        string auditorName;//审核人名称
        string auditorMobile;//审核人电话
        uint256 auditorTime;//审核时间
        int auditResult;//审核结果  1 同意 2 不同意
        string auditDesc;//审核建议
    }

    /**
    * fromJson for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function fromJson(AuditRecord storage _self, string _json) internal returns(bool succ) {
        _self.reset();

        if (!_json.isJson())
        return false;

        _self.auditId = _json.jsonRead("auditId");
        _self.auditorId = _json.jsonRead("auditorId");
        _self.auditorName = _json.jsonRead("auditorName");
        _self.auditorMobile = _json.jsonRead("auditorMobile");
        _self.auditorTime = uint256(_json.jsonRead("auditorTime").toUint());
        _self.auditResult = _json.jsonRead("auditResult").toInt();
        _self.auditDesc = _json.jsonRead("auditDesc");

        return true;
    }

    /**
    * toJson for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function toJson(AuditRecord storage _self) internal constant returns (string _json) {
        LibStack.push("{");
        LibStack.appendKeyValue("auditId", _self.auditId);
        LibStack.appendKeyValue("auditorId", _self.auditorId);
        LibStack.appendKeyValue("auditorName", _self.auditorName);
        LibStack.appendKeyValue("auditorMobile", _self.auditorMobile);
        LibStack.appendKeyValue("auditorTime", uint256(_self.auditorTime));
        LibStack.appendKeyValue("auditResult", _self.auditResult);
        LibStack.appendKeyValue("auditDesc", _self.auditDesc);
        LibStack.append("}");
        _json = LibStack.pop();
    }

    /**
    * fromJsonArray for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function fromJsonArray(AuditRecord[] storage _self, string _json) internal returns(bool succ) {
        _self.length = 0;

        if (!_json.isJson())
        return false;

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
            break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        return true;
    }

    /**
    * toJsonArray for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function toJsonArray(AuditRecord[] storage _self) internal constant returns(string _json) {
        _json = _json.concat("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i == 0)
            _json = _json.concat(_self[i].toJson());
            else
            _json = _json.concat(",", _self[i].toJson());
        }
        _json = _json.concat("]");
    }

    /**
    * update for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function update(AuditRecord storage _self, string _json) internal returns(bool succ) {
        if (!_json.isJson())
        return false;

        if (_json.jsonKeyExists("auditId"))
        _self.auditId = _json.jsonRead("auditId");
        if (_json.jsonKeyExists("auditorId"))
        _self.auditorId = _json.jsonRead("auditorId");
        if (_json.jsonKeyExists("auditorName"))
        _self.auditorName = _json.jsonRead("auditorName");
        if (_json.jsonKeyExists("auditorMobile"))
        _self.auditorMobile = _json.jsonRead("auditorMobile");
        if (_json.jsonKeyExists("auditorTime"))
        _self.auditorTime = uint256(_json.jsonRead("auditorTime").toUint());
        if (_json.jsonKeyExists("auditResult"))
        _self.auditResult = _json.jsonRead("auditResult").toInt();
        if (_json.jsonKeyExists("auditDesc"))
        _self.auditDesc = _json.jsonRead("auditDesc");

        return true;
    }

    /**
    * reset for AuditRecord
    * Generated by juzhen SolidityStructTool automatically.
    * Not to edit this code manually.
    */
    function reset(AuditRecord storage _self) internal {
        delete _self.auditId;
        delete _self.auditorId;
        delete _self.auditorName;
        delete _self.auditorMobile;
        delete _self.auditorTime;
        delete _self.auditResult;
        delete _self.auditDesc;
    }
}
