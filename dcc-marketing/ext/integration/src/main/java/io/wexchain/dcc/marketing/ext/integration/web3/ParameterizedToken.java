package io.wexchain.dcc.marketing.ext.integration.web3;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;

/**
 * <p>Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.1.0-SNAPSHOT.
 */
public final class ParameterizedToken extends Contract {
    private static final String BINARY = "0x600060038181556007805460ff1916905560a060405260608190527f312e3300000000000000000000000000000000000000000000000000000000006080908152600a8054938190527f312e3300000000000000000000000000000000000000000000000000000000068155927fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8602060026101006001851615026000190190931692909204601f019190910481019291620000e6565b82800160010185558215620000e6579182015b82811115620000e6578251825591602001919060010190620000c9565b5b506200010a9291505b80821115620001065760008155600101620000f0565b5090565b5050346200000057604051620045123803806200451283398101604090815281516020830151918301516060840151918401939290920191905b81600a0a81025b5b600180546c0100000000000000000000000033810204600160a060020a0319918216179091556002805490911660111790555b600081116200018e5762000000565b60098190555b5060408051808201825260188082527f506172616d65746572697a6564546f6b656e4d6f64756c65000000000000000060208084018290528451808601865260078082527f302e302e312e3000000000000000000000000000000000000000000000000000828401819052875180890189529586528584019490945286518088019097528652908501919091526200023d9390919064010000000062000f966200039582021704565b83600b9080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028b57805160ff1916838001178555620002bb565b82800160010185558215620002bb579182015b82811115620002bb5782518255916020019190600101906200029e565b5b50620002df9291505b80821115620001065760008155600101620000f0565b5090565b505082600c9080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032f57805160ff19168380011785556200035f565b828001600101855582156200035f579182015b828111156200035f57825182559160200191906001019062000342565b5b50620003839291505b80821115620001065760008155600101620000f0565b5090565b5050600d8290555b50505050620011a2565b6000600260009054906101000a9004600160a060020a0316600160a060020a0316630e24c52c86868686600060405160200152604051857c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001806020018581038552898181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156200045a5780820380516001836020036101000a031916815260200191505b508581038452888181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015620004b45780820380516001836020036101000a031916815260200191505b508581038352878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156200050e5780820380516001836020036101000a031916815260200191505b508581038252868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015620005685780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15620000005760325a03f11562000000575050604051519150508015620006205760408051606081018252602381527f726567697374657220636f6e74726163743a206661696c65642e2061626f727460208201527f212121000000000000000000000000000000000000000000000000000000000091810191909152620006199086856401000000006200138f6200064682021704565b506200063f565b6200063d8585858530640100000000620027d3620007bb82021704565b505b5050505050565b60408051602081810183526000918290528251606081018452602b8152600080516020620044f2833981519152818301527f655d5b3035766d6c6f675d000000000000000000000000000000000000000000818501528351808501909452600184527f7c00000000000000000000000000000000000000000000000000000000000000918401919091529091829081908190620006f49085908a640100000000620029fe62000a5482021704565b60408051808201909152600181527f7c0000000000000000000000000000000000000000000000000000000000000060208201529094506200074790859089640100000000620029fe62000a5482021704565b60408051808201909152600181527f7c0000000000000000000000000000000000000000000000000000000000000060208201529094506200079a90859088640100000000620029fe62000a5482021704565b9350835191506020840192508183209050600094505b505050509392505050565b604080516020818101835260008083528351808501909452600184527f7c0000000000000000000000000000000000000000000000000000000000000091840191909152916200081c90889088640100000000620029fe62000a5482021704565b60408051808201909152600181527f7c0000000000000000000000000000000000000000000000000000000000000060208201529091506200086f90829087640100000000620029fe62000a5482021704565b60408051808201909152600181527f7c000000000000000000000000000000000000000000000000000000000000006020820152909150620008c290829086640100000000620029fe62000a5482021704565b60408051808201909152601381527f636f6e7472616374416464727c757064617465000000000000000000000000006020820152909150620009359062000920600160a060020a03861664010000000062002aa662000b3f82021704565b83640100000000620021e662000ce482021704565b91508115620009c657604080518082018252600e81527f4f776e65724e616d65642e736f6c0000000000000000000000000000000000006020808301919091528251808401909352601b83527f75706461746520636f6e747261637441646472206661696c65642e000000000090830152620009bf9164010000000062001c7562000e0982021704565b5062000a49565b604080518082018252600e81527f4f776e65724e616d65642e736f6c0000000000000000000000000000000000006020808301919091528251808401909352601c83527f75706461746520636f6e74726163744164647220737563636573732e000000009083015262000a479164010000000062001c7562000e0982021704565b505b5b5095945050505050565b602060405190810160405280600081526020015060006000600060006000865188518a51010160405180591062000a885750595b8181526020808302820101604052905b5095506020890194506020880193506020870192506020860191506000905062000adb818301868b5162000f2a6401000000000262003139176401000000009004565b88518101905062000b05818301858a5162000f2a6401000000000262003139176401000000009004565b87518101905062000b2f81830184895162000f2a6401000000000262003139176401000000009004565b8651015b50505050509392505050565b602060405190810160405280600081526020015060006000602a60405180591062000b675750595b8181526020808302820101604052905b5092507f300000000000000000000000000000000000000000000000000000000000000083600081518110156200000057906020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000083600181518110156200000057906020010190600160f860020a031916908160001a905350602991505b600260ff83161062000cdc57506010830492600f16600a81101562000c7d57806030017f010000000000000000000000000000000000000000000000000000000000000002838360ff1681518110156200000057906020010190600160f860020a031916908160001a90535062000cce565b600a81036061017f010000000000000000000000000000000000000000000000000000000000000002838360ff1681518110156200000057906020010190600160f860020a031916908160001a9053505b5b6000199091019062000c0b565b5b5050919050565b60408051602081810183526000918290528251606081018452602d8152600080516020620044f2833981519152918101919091527f655d5b3037777269746564625d00000000000000000000000000000000000000928101929092529081808062000d7962000d6389600264010000000062002fa862000f7582021704565b859064010000000062002fe462000fc582021704565b935062000db062000d6388600464010000000062002fa862000f7582021704565b859064010000000062002fe462000fc582021704565b935062000de762000d6387600964010000000062002fa862000f7582021704565b859064010000000062002fe462000fc582021704565b805160208201818120975091955090935091508490505b505050509392505050565b60408051602081810183526000918290528251606081018452602b8152600080516020620044f2833981519152818301527f655d5b3035766d6c6f675d000000000000000000000000000000000000000000818501528351808501909452600184527f7c0000000000000000000000000000000000000000000000000000000000000091840191909152909182908190819062000eb790859089640100000000620029fe62000a5482021704565b60408051808201909152600181527f7c00000000000000000000000000000000000000000000000000000000000000602082015290945062000f0a90859088640100000000620029fe62000a5482021704565b9350835191506020840192508183209050600094505b5050505092915050565b60005b6020821062000f515782518452602093840193909201915b60208203915062000f2d565b6001826020036101000a039050801983511681855116818117865250505b50505050565b604080516020810190915260008152825162000fbc90849062000fa79085640100000000620032086200106882021704565b9064010000000062002fe462000fc582021704565b90505b92915050565b6020604051908101604052806000815260200150600060006000845186510160405180591062000ff25750595b8181526020808302820101604052905b509350602086019250602085019150602084019050620010398184885162000f2a6401000000000262003139176401000000009004565b6200105e8651820183875162000f2a6401000000000262003139176401000000009004565b5b50505092915050565b6040805160208101909152600080825283815b60008211156200109757600a826001909401930491506200107b565b84831015620010a4578492505b82604051805910620010b35750595b8181526020808302820101604052905b5093505060001982015b60008611156200113757600a86066030017f010000000000000000000000000000000000000000000000000000000000000002848260000b81518110156200000057906020010190600160f860020a031916908160001a90535060001901600a86049550620010cd565b5b600081810b126200105e5760307f010000000000000000000000000000000000000000000000000000000000000002848260000b81518110156200000057906020010190600160f860020a031916908160001a9053506000190162001138565b5b50505092915050565b61334080620011b26000396000f300606060405236156101cc5760e060020a600035046305d2035b81146101d157806305f9bb6b146101f257806306fdde03146102135780630946b6e81461028e578063095ea7b31461029d5780630e24c52c146102c4578063180db1b4146103d057806318160ddd146103ef57806323b872dd1461040e5780632ced7cef14610438578063313ce56714610517578063319af33314610536578063355274ea1461059d5780633ca6268e146105bc5780633e1092f2146106235780633ffbd47f146106b757806340c10f191461074957806341304fac1461077057806341c0e1b5146107d557806346eac50e146107e45780634b5c42771461080b57806354fd4d50146108ad5780635e01eb5a1461092857806366188463146109a357806370a08231146109ca5780637d64bcb4146109ec57806387319e1e14610a0d5780638784872714610b1b578063893d20e814610bfa57806395d89b4114610c75578063983b2d5614610cf0578063a9059cbb14610d02578063af35c6c714610d29578063b60e72cc14610d38578063beb9716d14610d9f578063d73dd62314610dae578063d82f94a314610dd5578063dd62ed3e14610de7578063f2fde38b14610e0c578063f46eccc414610e1e575b610000565b34610000576101de610e42565b604080519115158252519081900360200190f35b34610000576101de610e4b565b604080519115158252519081900360200190f35b3461000057610220610e54565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761029b610ee2565b005b34610000576101de600435602435610f25565b604080519115158252519081900360200190f35b346100005761029b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650610f9695505050505050565b005b34610000576103dd611209565b60408051918252519081900360200190f35b34610000576103dd611210565b60408051918252519081900360200190f35b34610000576101de600435602435604435611216565b604080519115158252519081900360200190f35b34610000576103dd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061138f95505050505050565b60408051918252519081900360200190f35b34610000576103dd61148b565b60408051918252519081900360200190f35b34610000576103dd600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935061149192505050565b60408051918252519081900360200190f35b34610000576103dd611574565b60408051918252519081900360200190f35b34610000576103dd600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935061157a92505050565b60408051918252519081900360200190f35b346100005761029b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650509335935061165492505050565b005b346100005761029b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061180595505050505050565b005b34610000576101de6004356024356119a4565b604080519115158252519081900360200190f35b34610000576103dd600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506119ea95505050505050565b60408051918252519081900360200190f35b346100005761029b611a84565b005b34610000576101de600435602435611b07565b604080519115158252519081900360200190f35b34610000576103dd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650611c7595505050505050565b60408051918252519081900360200190f35b3461000057610220611d40565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610220611dce565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101de600435602435611dfb565b604080519115158252519081900360200190f35b34610000576103dd600435611f01565b60408051918252519081900360200190f35b34610000576101de611f20565b604080519115158252519081900360200190f35b346100005761029b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979998810197919650918201945092508291508401838280828437509496505093359350611f6f92505050565b005b34610000576103dd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979998810197919650918201945092508291508401838280828437509496506121e695505050505050565b60408051918252519081900360200190f35b34610000576102206122bc565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576102206122ec565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761029b60043561237a565b005b34610000576101de6004356024356123a9565b604080519115158252519081900360200190f35b346100005761029b61249b565b005b34610000576103dd600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965050933593506124b392505050565b60408051918252519081900360200190f35b346100005761029b61258d565b005b34610000576101de6004356024356125a0565b604080519115158252519081900360200190f35b346100005761029b60043561264b565b005b34610000576103dd600435602435612677565b60408051918252519081900360200190f35b346100005761029b6004356126a4565b005b34610000576101de6004356127aa565b604080519115158252519081900360200190f35b60075460ff1681565b60055460ff1681565b600b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610eda5780601f10610eaf57610100808354040283529160200191610eda565b820191906000526020600020905b815481529060010190602001808311610ebd57829003601f168201915b505050505081565b600160a060020a03331660009081526008602052604090205460ff1680610f17575060015433600160a060020a039081169116145b1515610f2257610000565b5b565b6000610f2f6127bf565b600160a060020a03338116600081815260066020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b6000600260009054906101000a9004600160a060020a0316600160a060020a0316630e24c52c868686866000604051602001526040518560e060020a02815260040180806020018060200180602001806020018581038552898181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156110415780820380516001836020036101000a031916815260200191505b508581038452888181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561109a5780820380516001836020036101000a031916815260200191505b508581038352878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156110f35780820380516001836020036101000a031916815260200191505b508581038252868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561114c5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b156100005760325a03f1156100005750506040515191505080156111f3576111ed606060405190810160405280602381526020017f726567697374657220636f6e74726163743a206661696c65642e2061626f727481526020017f2121210000000000000000000000000000000000000000000000000000000000815260200150868561138f565b50611202565b61120085858585306127d3565b505b5050505050565b6003545b90565b60005481565b60006112206127bf565b600160a060020a038316151561123557610000565b600160a060020a03841660009081526004602052604090205482111561125a57610000565b600160a060020a038085166000908152600660209081526040808320339094168352929052205482111561128d57610000565b600160a060020a0384166000908152600460205260409020546112b6908363ffffffff6129c716565b600160a060020a0380861660009081526004602052604080822093909355908516815220546112eb908363ffffffff6129e116565b600160a060020a03808516600090815260046020908152604080832094909455878316825260068152838220339093168252919091522054611333908363ffffffff6129c716565b600160a060020a03808616600081815260066020908152604080832033861684528252918290209490945580518681529051928716939192600080516020613320833981519152929181900390910190a35060015b9392505050565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f0291840191909152909182908190819061140a9085908a63ffffffff6129fe16565b604080518082019091526001815260fa60020a601f02602082015290945061143a9085908963ffffffff6129fe16565b604080518082019091526001815260fa60020a601f02602082015290945061146a9085908863ffffffff6129fe16565b9350835191506020840192508183209050600094505b505050509392505050565b600d5481565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f0291840191909152909182908190819061150c9085908963ffffffff6129fe16565b604080518082019091526001815260fa60020a601f02602082015290945061155490611546600160a060020a03891663ffffffff612aa616565b86919063ffffffff6129fe16565b9350835191506020840192508183209050600094505b5050505092915050565b60095481565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f029184019190915290918290819081906115f59085908963ffffffff6129fe16565b604080518082019091526001815260fa60020a601f026020820152909450611554906115468863ffffffff612bf116565b86919063ffffffff6129fe16565b9350835191506020840192508183209050600094505b5050505092915050565b6000600260009054906101000a9004600160a060020a0316600160a060020a0316633e1092f28585856000604051602001526040518460e060020a02815260040180806020018060200184600160a060020a031681526020018381038352868181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156117055780820380516001836020036101000a031916815260200191505b508381038252858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561175e5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b156100005760325a03f1156100005750506040515191505080156117fe57611202606060405190810160405280603481526020017f7265676973746572206368616e67654d6f64756c6552656769737465724f776e81526020017f65723a206661696c65642e2061626f7274212121000000000000000000000000815260200150858561138f565b505b5b50505050565b6000600260009054906101000a9004600160a060020a0316600160a060020a0316633ffbd47f84846000604051602001526040518360e060020a0281526004018080602001806020018381038352858181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156118a65780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156118ff5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b156100005760325a03f11561000057505060405151915050801561199e576117fe606060405190810160405280602181526020017f7265676973746572206d6f64756c653a206661696c65642e2061626f7274212181526020017f2100000000000000000000000000000000000000000000000000000000000000815260200150848461138f565b505b5b505050565b60006119ae612d41565b6119b661258d565b6009546000546119cc908463ffffffff6129e116565b11156119d757610000565b6119e18383612d9d565b90505b92915050565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f02918401919091529091829081908190611a659085908863ffffffff6129fe16565b9350835191506020840192508183209050600094505b50505050919050565b60015433600160a060020a03908116911614611a9f57610f22565b600254604080517f26d7b3b40000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916326d7b3b49160048082019260009290919082900301818387803b156100005760325a03f115610000575050505b565b6000611b116127bf565b600160a060020a0383161515611b645760408051808201909152601181527f5f746f203d3d20616464726573732830290000000000000000000000000000006020820152611b5e906119ea565b50610000565b600160a060020a033216600090815260046020526040902054821115611bc7576040805180820190915260208082527f21285f76616c7565203c3d2062616c616e6365735b74782e6f726967696e5d2990820152611b5e906119ea565b50610000565b600160a060020a033216600090815260046020526040902054611bf0908363ffffffff6129c716565b600160a060020a033281166000908152600460205260408082209390935590851681522054611c25908363ffffffff6129e116565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193329093169260008051602061332083398151915292918290030190a35060015b92915050565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f02918401919091529091829081908190611cf09085908963ffffffff6129fe16565b604080518082019091526001815260fa60020a601f0260208201529094506115549085908863ffffffff6129fe16565b9350835191506020840192508183209050600094505b5050505092915050565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610eda5780601f10610eaf57610100808354040283529160200191610eda565b820191906000526020600020905b815481529060010190602001808311610ebd57829003601f168201915b505050505081565b604080516020810190915260008152611df5600160a060020a03331663ffffffff612e8d16565b90505b90565b60006000611e076127bf565b50600160a060020a0333811660009081526006602090815260408083209387168352929052205480831115611e6357600160a060020a033381166000908152600660209081526040808320938816835292905290812055611e9a565b611e73818463ffffffff6129c716565b600160a060020a033381166000908152600660209081526040808320938916835292905220555b600160a060020a0333811660008181526006602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3600191505b5092915050565b600160a060020a0381166000908152600460205260409020545b919050565b6000611f2a612d41565b611f3261258d565b6007805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b90565b6000600260009054906101000a9004600160a060020a0316600160a060020a03166387319e1e87878787876000604051602001526040518660e060020a028152600401808060200180602001806020018060200186600160a060020a0316815260200185810385528a8181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561202a5780820380516001836020036101000a031916815260200191505b508581038452898181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156120835780820380516001836020036101000a031916815260200191505b508581038352888181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156120dc5780820380516001836020036101000a031916815260200191505b508581038252878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156121355780820380516001836020036101000a031916815260200191505b509950505050505050505050602060405180830381600087803b156100005760325a03f115610000575050604051519150508015611200576121d7606060405190810160405280603681526020017f7265676973746572206368616e6765436f6e747261637452656769737465724f81526020017f776e65723a206661696c65642e2061626f727421212100000000000000000000815260200150878661138f565b50611200565b5b505050505050565b60408051602081810183526000918290528251606081018452602d8152600080516020613300833981519152918101919091527f655d5b3037777269746564625d000000000000000000000000000000000000009281019290925290818080612260612253896002612fa8565b859063ffffffff612fe416565b935061227d612253886004612fa8565b859063ffffffff612fe416565b935061229a612253876009612fa8565b859063ffffffff612fe416565b805160208201818120975091955090935091508490505b505050509392505050565b604080516020810190915260008152600154611df590600160a060020a031663ffffffff612e8d16565b90505b90565b600c805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610eda5780601f10610eaf57610100808354040283529160200191610eda565b820191906000526020600020905b815481529060010190602001808311610ebd57829003601f168201915b505050505081565b612382612d41565b600160a060020a0381166000908152600860205260409020805460ff191660011790555b50565b60006123b36127bf565b600160a060020a03831615156123c857610000565b600160a060020a0333166000908152600460205260409020548211156123ed57610000565b600160a060020a033316600090815260046020526040902054612416908363ffffffff6129c716565b600160a060020a03338116600090815260046020526040808220939093559085168152205461244b908363ffffffff6129e116565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193339093169260008051602061332083398151915292918290030190a35060015b92915050565b6124a3612d41565b6005805460ff191660011790555b565b60408051602081810183526000918290528251606081018452602b81526000805160206133008339815191528183015260a860020a6a655d5b3035766d6c6f675d028185015283518085019094526001845260fa60020a601f0291840191909152909182908190819061252e9085908963ffffffff6129fe16565b604080518082019091526001815260fa60020a601f026020820152909450611554906115468863ffffffff61305a16565b86919063ffffffff6129fe16565b9350835191506020840192508183209050600094505b5050505092915050565b60075460ff1615610f2257610000565b5b565b60006125aa6127bf565b600160a060020a033381166000908152600660209081526040808320938716835292905220546125e0908363ffffffff6129e116565b600160a060020a0333811660008181526006602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b612653612d41565b600160a060020a0381166000908152600860205260409020805460ff191690555b50565b600160a060020a038083166000908152600660209081526040808320938516835292905220545b92915050565b60408051808201909152601181527f7472616e736665724f776e65727368697000000000000000000000000000000060208201526126e1906119ea565b506126ea612d41565b600160a060020a038116151561273d5760408051808201909152601681527f6e65774f776e6572203d3d2061646472657373283029000000000000000000006020820152611b5e906119ea565b50610000565b6001805473ffffffffffffffffffffffffffffffffffffffff19166c01000000000000000000000000838102041790819055604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50565b60086020526000908152604090205460ff1681565b60055460ff161515610f2257610000565b5b565b6040805160208181018352600080835283518085019094526001845260fa60020a601f0291840191909152916128119088908863ffffffff6129fe16565b604080518082019091526001815260fa60020a601f0260208201529091506128419082908763ffffffff6129fe16565b604080518082019091526001815260fa60020a601f0260208201529091506128719082908663ffffffff6129fe16565b60408051808201909152601381527f636f6e7472616374416464727c7570646174650000000000000000000000000060208201529091506128ca906128c4600160a060020a03861663ffffffff612aa616565b836121e6565b9150811561294957604080518082018252600e81527f4f776e65724e616d65642e736f6c0000000000000000000000000000000000006020808301919091528251808401909352601b83527f75706461746520636f6e747261637441646472206661696c65642e00000000009083015261294391611c75565b506129bc565b604080518082018252600e81527f4f776e65724e616d65642e736f6c0000000000000000000000000000000000006020808301919091528251808401909352601c83527f75706461746520636f6e74726163744164647220737563636573732e00000000908301526129ba91611c75565b505b5b5095945050505050565b6000828211156129d657610000565b508082035b92915050565b6000828201838110156129f357610000565b8091505b5092915050565b602060405190810160405280600081526020015060006000600060006000865188518a510101604051805910612a315750595b8181526020808302820101604052905b50955060208901945060208801935060208701925060208601915060009050612a6e818301868b51613139565b885181019050612a82818301858a51613139565b875181019050612a96818301848951613139565b8651015b50505050509392505050565b602060405190810160405280600081526020015060006000602a604051805910612acd5750595b8181526020808302820101604052905b50925060fc60020a600302836000815181101561000057906020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000836001815181101561000057906020010190600160f860020a031916908160001a905350602991505b600260ff831610612be957506010830492600f16600a811015612ba8578060300160f860020a02838360ff16815181101561000057906020010190600160f860020a031916908160001a905350612bdc565b600a810360610160f860020a02838360ff16815181101561000057906020010190600160f860020a031916908160001a9053505b5b60001990910190612b56565b5b5050919050565b6040805160208101909152600080825280808080861515612c2e57604080518082019091526001815260fc60020a60030260208201529550612d36565b86945060019350600092506000871215612c52576000878103955093506001909201915b8491505b6000821115612c7057600a82600190940193049150612c56565b8260ff16604051805910612c815750595b8181526020808302820101604052905b509550831515612ce1577f2d00000000000000000000000000000000000000000000000000000000000000866000815181101561000057906020010190600160f860020a031916908160001a9053505b5060001982015b6000851115612d3657600a850660300160f860020a0286828060019003935060ff16815181101561000057906020010190600160f860020a031916908160001a905350600a85049450612ce8565b5b5050505050919050565b60015433600160a060020a03908116911614610f225760408051808201909152601381527f6d73672e73656e64657220213d206f776e6572000000000000000000000000006020820152611b5e906119ea565b50610000565b5b565b6000612da7610ee2565b612daf61258d565b600160a060020a0383161515612dc457610000565b600054612dd7908363ffffffff6129e116565b6000908155600160a060020a038416815260046020526040902054612e02908363ffffffff6129e116565b600160a060020a038416600081815260046020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206133208339815191529181900360200190a35060015b92915050565b6020604051908101604052806000815260200150602060405190810160405280600081526020015060006000600060006028604051805910612ecc5750595b8181526020808302820101604052905b509450600093505b6014841015612f9a578360130360080260020a87600160a060020a03168115610000570460f860020a9081029350601081850460ff8116829004830294508285049091029003029050612f3682613182565b8585600202815181101561000057906020010190600160f860020a031916908160001a905350612f6581613182565b8585600202600101815181101561000057906020010190600160f860020a031916908160001a9053505b600190930192612ee4565b8495505b5050505050919050565b60408051602081019091526000815282516119e1908490612fcf908563ffffffff61320816565b9063ffffffff612fe416565b90505b92915050565b602060405190810160405280600081526020015060006000600084518651016040518059106130105750595b8181526020808302820101604052905b50935060208601925060208501915060208401905061304181848851613139565b61305086518201838751613139565b5b50505092915050565b60408051602081019091526000808252808084151561309557604080518082019091526001815260fc60020a60030260208201529350613130565b600092508491505b60008211156130b757600a8260019094019304915061309d565b8260ff166040518059106130c85750595b8181526020808302820101604052905b5093505060001982015b600085111561313057600a850660300160f860020a0284828060019003935060ff16815181101561000057906020010190600160f860020a031916908160001a905350600a850494506130e2565b5b505050919050565b60005b6020821061315e5782518452602093840193909201915b60208203915061313c565b6001826020036101000a039050801983511681855116818117865250505b50505050565b60007f0a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000831610156131ea578160f860020a900460300160f860020a029050611f1b56611f1b565b8160f860020a900460570160f860020a029050611f1b565b5b919050565b6040805160208101909152600080825283815b600082111561323557600a8260019094019304915061321b565b84831015613241578492505b8260405180591061324f5750595b8181526020808302820101604052905b5093505060001982015b60008611156132b457600a860660300160f860020a02848260000b815181101561000057906020010190600160f860020a031916908160001a90535060001901600a86049550613269565b5b600081810b1261305057603060f860020a02848260000b815181101561000057906020010190600160f860020a031916908160001a905350600019016132b5565b5b50505092915050565b36396439386436613034633431623436303561616362376264326637346265ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5b36396439386436613034633431623436303561616362376264326637346265";

    private ParameterizedToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ParameterizedToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.to = (Address)eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256)eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable() {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.to = (Address)eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256)eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<MintFinishedEventResponse> getMintFinishedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<MintFinishedEventResponse> responses = new ArrayList<MintFinishedEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintFinishedEventResponse> mintFinishedEventObservable() {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintFinishedEventResponse>() {
            @Override
            public MintFinishedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (Address)eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address)eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable() {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (Address)eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address)eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.owner = (Address)eventValues.getIndexedValues().get(0);
            typedResponse.spender = (Address)eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256)eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable() {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.owner = (Address)eventValues.getIndexedValues().get(0);
                typedResponse.spender = (Address)eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256)eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event,transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for(EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.from = (Address)eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address)eventValues.getIndexedValues().get(1);
            typedResponse.value = (Uint256)eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable() {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(DefaultBlockParameterName.EARLIEST,DefaultBlockParameterName.LATEST, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.from = (Address)eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address)eventValues.getIndexedValues().get(1);
                typedResponse.value = (Uint256)eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Future<Bool> mintingFinished() {
        Function function = new Function("mintingFinished", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> transfersEnabledFlag() {
        Function function = new Function("transfersEnabledFlag", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> onlyMinters() {
        Function function = new Function("onlyMinters", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> approve(Address _spender, Uint256 _value) {
        Function function = new Function("approve", Arrays.<Type>asList(_spender, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> register(Utf8String _moduleName, Utf8String _moduleVersion, Utf8String _contractName, Utf8String _contractVersion) {
        Function function = new Function("register", Arrays.<Type>asList(_moduleName, _moduleVersion, _contractName, _contractVersion), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> getErrno() {
        Function function = new Function("getErrno", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> transferFrom(Address _from, Address _to, Uint256 _value) {
        Function function = new Function("transferFrom", Arrays.<Type>asList(_from, _to, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> log(Utf8String _str, Utf8String _str2, Utf8String _str3) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str, _str2, _str3), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> decimals() {
        Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> log(Utf8String _str, Address _addr) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str, _addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> cap() {
        Function function = new Function("cap", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> log(Utf8String _str, Int256 _i) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str, _i), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> changeModuleRegisterOwner(Utf8String _moduleName, Utf8String _moduleVersion, Address _newOwner) {
        Function function = new Function("changeModuleRegisterOwner", Arrays.<Type>asList(_moduleName, _moduleVersion, _newOwner), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> register(Utf8String _moduleName, Utf8String _moduleVersion) {
        Function function = new Function("register", Arrays.<Type>asList(_moduleName, _moduleVersion), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> mint(Address _to, Uint256 _amount) {
        Function function = new Function("mint", Arrays.<Type>asList(_to, _amount), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> log(Utf8String _str) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> kill() {
        Function function = new Function("kill", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> superTransfer(Address _to, Uint256 _value) {
        Function function = new Function("superTransfer", Arrays.<Type>asList(_to, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> log(Utf8String _str, Utf8String _str2) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str, _str2), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> version() {
        Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getSender() {
        Function function = new Function("getSender", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> decreaseApproval(Address _spender, Uint256 _subtractedValue) {
        Function function = new Function("decreaseApproval", Arrays.<Type>asList(_spender, _subtractedValue), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> balanceOf(Address _owner) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(_owner), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> finishMinting() {
        Function function = new Function("finishMinting", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> changeContractRegisterOwner(Utf8String _moduleName, Utf8String _moduleVersion, Utf8String _contractName, Utf8String _contractVersion, Address _newOwner) {
        Function function = new Function("changeContractRegisterOwner", Arrays.<Type>asList(_moduleName, _moduleVersion, _contractName, _contractVersion, _newOwner), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> writedb(Utf8String _name, Utf8String _key, Utf8String _value) {
        Function function = new Function("writedb", 
                Arrays.<Type>asList(_name, _key, _value), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> getOwner() {
        Function function = new Function("getOwner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> addMinter(Address _addr) {
        Function function = new Function("addMinter", Arrays.<Type>asList(_addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> transfer(Address _to, Uint256 _value) {
        Function function = new Function("transfer", Arrays.<Type>asList(_to, _value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> enableTransfers() {
        Function function = new Function("enableTransfers", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> log(Utf8String _str, Uint256 _ui) {
        Function function = new Function("log", 
                Arrays.<Type>asList(_str, _ui), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> canMint() {
        Function function = new Function("canMint", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> increaseApproval(Address _spender, Uint256 _addedValue) {
        Function function = new Function("increaseApproval", Arrays.<Type>asList(_spender, _addedValue), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> deleteMinter(Address _addr) {
        Function function = new Function("deleteMinter", Arrays.<Type>asList(_addr), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> allowance(Address _owner, Address _spender) {
        Function function = new Function("allowance", 
                Arrays.<Type>asList(_owner, _spender), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> transferOwnership(Address newOwner) {
        Function function = new Function("transferOwnership", Arrays.<Type>asList(newOwner), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bool> minters(Address param0) {
        Function function = new Function("minters", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ParameterizedToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue, Utf8String _name, Utf8String _symbol, Uint256 _decimals, Uint256 _capIntPart) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_name, _symbol, _decimals, _capIntPart));
        return deployAsync(ParameterizedToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialValue);
    }

    public static Future<ParameterizedToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue, Utf8String _name, Utf8String _symbol, Uint256 _decimals, Uint256 _capIntPart) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_name, _symbol, _decimals, _capIntPart));
        return deployAsync(ParameterizedToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialValue);
    }

    public static ParameterizedToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ParameterizedToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ParameterizedToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ParameterizedToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class MintEventResponse {
        public Address to;

        public Uint256 amount;
    }

    public static class MintFinishedEventResponse {
    }

    public static class OwnershipTransferredEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class ApprovalEventResponse {
        public Address owner;

        public Address spender;

        public Uint256 value;
    }

    public static class TransferEventResponse {
        public Address from;

        public Address to;

        public Uint256 value;
    }
}
